nodejs  是js 的执行环境 js和nodejs都是单线程 
node 非阻塞  异步
node的特点
	1.异步I/O input/output
	2.事件与回调函数
	3.单线程
	4.跨平台

node -v  node的版本号

ctrl + c 结束当前命令行

cd 文件夹名  进入子文件夹
cd.. 返回上一级
cd\  返回根目录
exit 退出终端
cis  清屏
dir  查看当前文件下有什么目录
mkdir + 文件夹名  新建文件夹
type + js  查看文件内容
time  返回时间
date  返回日期


sea.js  CMD 懒加载
require.js AMD 预加载

exports抛出一定是对象 而module.exports 抛出当前内容形式
module是exports的父级  能够改变其内容形式

初始化        npm init ---生成package.json
下载第三方包 ： （生成node_modules目录）
	      npm install jQuery --save  在package.json生成一个dependncies的依赖

	      npm install jQuery --save-dev  在package.json生成一个devDependncies的依赖 用于本地开发
	      npm install jQuery --D  是 npm install jquery --save-dev 的简写
	      nom install jQuery -g 是下载到全局路径
文件卸载
	      npm uninstall 包名
梳理代码工程目录
1.建一个入口文件
2.初始化npm==》npm init ==》生成package.json（包管理文件）
3.下载第三方包  npm install + 包的名字
4.建立子文件目录
package.json 中scripts字段可用于封装一些命令  运行方式 npm run+字段名  多个命令之间用 && 隔开

1.新建一个以.cmd为后缀名的文件
2.在文件中输入要执行的命令 + %*
3.输入@pause 将命令行停止固定住
4.双击命令行程序


var fs = require("fs") fs模块用于对系统文件及目录进行读写操作 操作文件的内置模块
fs每个方法都对应有同步 异步
fs读取文件
异步：fs.readFile（"要读取文件的绝对路径(./libs/a.js)",function(err,data){
	if（err）throw err；
	}）
同步：var rs = fs.readFileSync(“要读取文件的绝对路径”)
	console.log(rs);
文件写入
异步：	fs.writeFile("要写入的文件","要写入的内容"，{“encoding”:"utf-8"}，function（err	）{
		if（err）throw err；
	})
同步：fs.writeFileSymc("要写入的文件","要写入的内容"，{“encoding”:"utf-8"}）
若存在该文件 则替换内容，没有则创建
创建文件夹 new date() - 0 获取时间戳
	fs.mkdir("./文件夹名",function(err){
		if（err）throw err；
	})	
获取文件信息
	fs.stat("./文件名",function(err,st){
		st就是信息
		st.isFile()返回布尔值  判断是否是文件
		st.isDirectory()  判断是否是文件夹
	})
atime ：access time 读取文件或者执行文件的时间
mtime ：modified time 修改文件的时间
ctime ： create time 写入文件，更改所有者、权限或链接设置时的时间

fs.open()以异步的方式打开文件  参数 1.文件路径 2.打开方式 fd是文件的唯一标识 相当于id
a是以追加方式打开文件 若文件不存在则创建
fs.open("./文件名","a",function(err,fd){})

fs.futimes(fd,atime,mtime,callback)  打开文件后修改文件时间 更改一个文件所提供的文件描述符引用的文件的时间戳

node的全局对象是 process
打印全局 process.argv 获取命令行参数 返回数组
第一个是 node全局路径  第二个是入口文件  第三个是 命令行参数














